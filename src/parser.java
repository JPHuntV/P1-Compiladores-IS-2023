
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package src;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\004\011\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\055\003\000\002" +
    "\055\004\000\002\056\003\000\002\056\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\005\000\002\016\003\000\002" +
    "\016\003\000\002\014\005\000\002\015\003\000\002\015" +
    "\005\000\002\017\003\000\002\017\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\005\000\002\022\003\000\002\022\005\000" +
    "\002\023\011\000\002\024\011\000\002\024\012\000\002" +
    "\064\006\000\002\025\011\000\002\026\013\000\002\027" +
    "\014\000\002\030\003\000\002\030\004\000\002\030\005" +
    "\000\002\030\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\004\000\002\031\003\000\002" +
    "\032\003\000\002\062\003\000\002\062\003\000\002\033" +
    "\003\000\002\033\005\000\002\034\005\000\002\034\006" +
    "\000\002\034\003\000\002\034\003\000\002\054\004\000" +
    "\002\035\005\000\002\036\004\000\002\036\004\000\002" +
    "\036\003\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\037\003\000\002\037\004\000" +
    "\002\040\004\000\002\040\006\000\002\041\012\000\002" +
    "\041\011\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\043\010\000\002\043\010\000\002\044\005\000" +
    "\002\045\006\000\002\045\006\000\002\045\007\000\002" +
    "\045\006\000\002\046\004\000\002\047\005\000\002\050" +
    "\006\000\002\051\003\000\002\051\003\000\002\052\006" +
    "\000\002\053\004\000\002\053\005\000\002\063\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\022\005\014\037\005\040\021\041\013\042" +
    "\022\043\010\044\007\060\006\001\002\000\004\002\000" +
    "\001\002\000\006\045\376\067\uff99\001\002\000\004\066" +
    "\374\001\002\000\004\067\uff94\001\002\000\004\067\uff95" +
    "\001\002\000\024\002\uffff\005\014\037\025\040\021\041" +
    "\013\042\022\043\010\044\007\060\006\001\002\000\004" +
    "\002\372\001\002\000\004\067\uff96\001\002\000\004\066" +
    "\371\001\002\000\016\037\005\040\021\041\013\042\022" +
    "\043\010\044\007\001\002\000\020\002\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\001\002\000\004" +
    "\067\023\001\002\000\020\002\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\001\002\000\004\067\uff97" +
    "\001\002\000\004\067\uff98\001\002\000\004\011\024\001" +
    "\002\000\020\012\026\037\025\040\021\041\013\042\022" +
    "\043\010\044\007\001\002\000\004\067\uff99\001\002\000" +
    "\004\020\364\001\002\000\004\067\363\001\002\000\006" +
    "\012\032\022\031\001\002\000\016\037\025\040\021\041" +
    "\013\042\022\043\010\044\007\001\002\000\004\020\033" +
    "\001\002\000\066\005\014\011\042\013\064\016\034\034" +
    "\056\035\062\037\043\040\021\041\013\042\037\043\010" +
    "\044\007\046\057\051\077\052\112\053\045\054\061\055" +
    "\066\056\102\057\055\060\006\062\072\063\067\064\103" +
    "\066\075\067\113\001\002\000\032\011\042\013\064\016" +
    "\034\034\056\035\062\056\102\057\055\062\072\063\067" +
    "\064\103\066\075\067\123\001\002\000\070\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\056\uffd1\057\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\066\uffd1\067\uffd1\070\uffd1\001" +
    "\002\000\054\010\255\011\ufff6\012\ufff6\013\261\014\256" +
    "\016\ufff6\017\ufff6\022\ufff6\025\262\032\257\033\260\034" +
    "\ufff6\035\ufff6\056\ufff6\057\ufff6\062\ufff6\063\ufff6\064\ufff6" +
    "\066\ufff6\067\ufff6\070\ufff6\001\002\000\004\067\352\001" +
    "\002\000\070\005\uffa7\011\uffa7\013\uffa7\016\uffa7\021\uffa7" +
    "\034\uffa7\035\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\046\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\066\uffa7\067\uffa7\001\002\000\070\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\016\uffad\017\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\056\uffad\057\uffad\062" +
    "\uffad\063\uffad\064\uffad\066\uffad\067\uffad\070\uffad\001\002" +
    "\000\030\011\251\013\064\016\034\034\056\035\062\056" +
    "\102\057\055\062\072\063\067\066\075\067\123\001\002" +
    "\000\004\067\345\001\002\000\070\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\016\uffac\017\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\056\uffac\057\uffac\062\uffac" +
    "\063\uffac\064\uffac\066\uffac\067\uffac\070\uffac\001\002\000" +
    "\004\011\322\001\002\000\052\004\uffd9\006\uffd9\007\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\016\uffd9\017\uffd9\022\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\056\uffd9\057\uffd9\062\uffd9\063\uffd9" +
    "\064\uffd9\066\uffd9\067\uffd9\070\uffd9\001\002\000\070\005" +
    "\014\011\042\013\064\016\034\021\321\034\056\035\062" +
    "\037\043\040\021\041\013\042\037\043\010\044\007\046" +
    "\057\051\077\052\112\053\045\054\061\055\066\056\102" +
    "\057\055\060\006\062\072\063\067\064\103\066\075\067" +
    "\113\001\002\000\016\023\307\024\314\026\305\027\313" +
    "\030\312\031\306\001\002\000\004\070\304\001\002\000" +
    "\070\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0" +
    "\017\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\056\uffd0\057\uffd0\062\uffd0\063\uffd0\064\uffd0\066\uffd0\067" +
    "\uffd0\070\uffd0\001\002\000\070\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\016\uffde\017\uffde\022\uffde\023\uffce\024" +
    "\uffce\025\uffde\026\uffce\027\uffce\030\uffce\031\uffce\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\056\uffde\057\uffde\062\uffde\063" +
    "\uffde\064\uffde\066\uffde\067\uffde\070\uffde\001\002\000\004" +
    "\070\303\001\002\000\004\011\300\001\002\000\004\067" +
    "\277\001\002\000\004\011\271\001\002\000\004\070\270" +
    "\001\002\000\034\011\042\013\064\016\034\034\056\035" +
    "\062\056\102\057\055\062\072\063\067\064\103\066\075" +
    "\067\123\070\uffb5\001\002\000\004\067\266\001\002\000" +
    "\052\004\243\006\245\007\241\011\uffdb\012\uffdb\013\uffdb" +
    "\016\uffdb\017\uffdb\022\uffdb\034\uffdb\035\uffdb\036\242\056" +
    "\uffdb\057\uffdb\062\uffdb\063\uffdb\064\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\001\002\000\006\062\172\063\173\001\002\000" +
    "\004\070\237\001\002\000\004\070\uffb4\001\002\000\070" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\017" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\056" +
    "\uffd2\057\uffd2\062\uffd2\063\uffd2\064\uffd2\066\uffd2\067\uffd2" +
    "\070\uffd2\001\002\000\070\005\uffb9\011\uffb9\013\uffb9\016" +
    "\uffb9\021\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\046\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\066\uffb9\067\uffb9\001\002\000\074\005" +
    "\uffbd\011\uffbd\013\uffbd\016\uffbd\021\uffbd\034\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046" +
    "\uffbd\047\213\050\212\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\066\uffbd\067\uffbd\001\002\000\070\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\056\uffd3\057\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002" +
    "\000\004\070\211\001\002\000\004\067\203\001\002\000" +
    "\070\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4" +
    "\017\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\056\uffd4\057\uffd4\062\uffd4\063\uffd4\064\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\001\002\000\070\005\uffb7\011\uffb7\013\uffb7" +
    "\016\uffb7\021\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\046\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\066\uffb7\067\uffb7\001\002\000\004" +
    "\011\175\001\002\000\070\005\uff9f\011\uff9f\013\uff9f\016" +
    "\uff9f\021\uff9f\034\uff9f\035\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\046\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\066\uff9f\067\uff9f\001\002\000\042\011" +
    "\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7\022\ufff7\034\ufff7" +
    "\035\ufff7\056\ufff7\057\ufff7\062\ufff7\063\ufff7\064\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\001\002\000\004\011\170\001\002" +
    "\000\052\004\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\016\uffd7\017\uffd7\022\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\056\uffd7\057\uffd7\062\uffd7\063\uffd7\064\uffd7\066\uffd7\067" +
    "\uffd7\070\uffd7\001\002\000\016\037\005\040\021\041\013" +
    "\042\022\043\010\044\007\001\002\000\004\070\165\001" +
    "\002\000\006\015\163\070\162\001\002\000\042\011\uffdc" +
    "\012\uffdc\013\uffdc\016\uffdc\017\uffdc\022\uffdc\034\uffdc\035" +
    "\uffdc\056\uffdc\057\uffdc\062\uffdc\063\uffdc\064\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\001\002\000\004\070\161\001\002\000" +
    "\070\005\uffb8\011\uffb8\013\uffb8\016\uffb8\021\uffb8\034\uffb8" +
    "\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\046\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\062\uffb8\063\uffb8\064\uffb8\066" +
    "\uffb8\067\uffb8\001\002\000\004\020\147\001\002\000\042" +
    "\010\uffd5\011\115\013\uffd5\014\uffd5\015\116\016\117\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\070\uffd5\001\002\000\006\015\uff8c\070" +
    "\uff8c\001\002\000\022\012\133\016\136\062\124\063\131" +
    "\064\127\065\125\066\130\067\134\001\002\000\032\011" +
    "\042\013\064\016\034\034\056\035\062\056\102\057\055" +
    "\062\072\063\067\064\103\066\075\067\123\001\002\000" +
    "\004\062\120\001\002\000\004\017\121\001\002\000\006" +
    "\015\uff91\070\uff91\001\002\000\004\070\uffaa\001\002\000" +
    "\070\010\uffd5\011\115\012\uffd5\013\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\056\uffd5\057\uffd5\062\uffd5\063\uffd5\064\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\001\002\000\006\012\uffcc\022\uffcc\001\002" +
    "\000\006\012\uffc8\022\uffc8\001\002\000\006\012\uffb1\022" +
    "\uffb1\001\002\000\006\012\uffca\022\uffca\001\002\000\006" +
    "\012\uffc9\022\uffc9\001\002\000\006\012\uffcb\022\uffcb\001" +
    "\002\000\006\012\145\022\144\001\002\000\070\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\056\uffaf\057" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\001\002\000\006\012\uffb3\022\uffb3\001\002\000\006\012" +
    "\uffb2\022\uffb2\001\002\000\032\011\042\013\064\016\034" +
    "\034\056\035\062\056\102\057\055\062\072\063\067\064" +
    "\103\066\075\067\123\001\002\000\006\017\uffc6\022\uffc6" +
    "\001\002\000\006\017\142\022\141\001\002\000\032\011" +
    "\042\013\064\016\034\034\056\035\062\056\102\057\055" +
    "\062\072\063\067\064\103\066\075\067\123\001\002\000" +
    "\006\012\uffc7\022\uffc7\001\002\000\006\017\uffc5\022\uffc5" +
    "\001\002\000\032\011\042\013\064\016\034\034\056\035" +
    "\062\056\102\057\055\062\072\063\067\064\103\066\075" +
    "\067\123\001\002\000\070\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\014\uffae\016\uffae\017\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\056\uffae\057\uffae\062\uffae\063\uffae" +
    "\064\uffae\066\uffae\067\uffae\070\uffae\001\002\000\006\012" +
    "\uffb0\022\uffb0\001\002\000\066\005\014\011\042\013\064" +
    "\016\034\034\056\035\062\037\043\040\021\041\013\042" +
    "\037\043\010\044\007\046\057\051\077\052\112\053\045" +
    "\054\061\055\066\056\102\057\055\060\006\062\072\063" +
    "\067\064\103\066\075\067\113\001\002\000\070\005\014" +
    "\011\042\013\064\016\034\021\151\034\056\035\062\037" +
    "\043\040\021\041\013\042\037\043\010\044\007\046\057" +
    "\051\077\052\112\053\045\054\061\055\066\056\102\057" +
    "\055\060\006\062\072\063\067\064\103\066\075\067\113" +
    "\001\002\000\004\051\153\001\002\000\070\005\uff9e\011" +
    "\uff9e\013\uff9e\016\uff9e\021\uff9e\034\uff9e\035\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\046\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\062\uff9e\063\uff9e\064\uff9e\066\uff9e\067\uff9e\001" +
    "\002\000\004\011\154\001\002\000\032\011\042\013\064" +
    "\016\034\034\056\035\062\056\102\057\055\062\072\063" +
    "\067\064\103\066\075\067\123\001\002\000\004\012\157" +
    "\001\002\000\056\011\uffce\012\uffce\013\uffce\016\uffce\017" +
    "\uffce\022\uffce\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\034\uffce\035\uffce\056\uffce\057\uffce\062\uffce\063" +
    "\uffce\064\uffce\066\uffce\067\uffce\070\uffce\001\002\000\004" +
    "\070\160\001\002\000\070\005\uffbf\011\uffbf\013\uffbf\016" +
    "\uffbf\021\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\046\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\066\uffbf\067\uffbf\001\002\000\070\005" +
    "\uffa9\011\uffa9\013\uffa9\016\uffa9\021\uffa9\034\uffa9\035\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\062\uffa9\063\uffa9\064\uffa9\066\uffa9\067" +
    "\uffa9\001\002\000\070\005\uffa1\011\uffa1\013\uffa1\016\uffa1" +
    "\021\uffa1\034\uffa1\035\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\046\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\066\uffa1\067\uffa1\001\002\000\032\011\042" +
    "\013\064\016\034\034\056\035\062\056\102\057\055\062" +
    "\072\063\067\064\103\066\075\067\123\001\002\000\004" +
    "\070\uff8b\001\002\000\070\005\uffa3\011\uffa3\013\uffa3\016" +
    "\uffa3\021\uffa3\034\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\046\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\066\uffa3\067\uffa3\001\002\000\070\005" +
    "\uffa8\011\uffa8\013\uffa8\016\uffa8\021\uffa8\034\uffa8\035\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\046" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\062\uffa8\063\uffa8\064\uffa8\066\uffa8\067" +
    "\uffa8\001\002\000\020\002\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\001\002\000\006\062\172\063" +
    "\173\001\002\000\004\012\174\001\002\000\070\010\uff89" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\016\uff89\017\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\056\uff89\057" +
    "\uff89\062\uff89\063\uff89\064\uff89\066\uff89\067\uff89\070\uff89" +
    "\001\002\000\070\010\uff88\011\uff88\012\uff88\013\uff88\014" +
    "\uff88\016\uff88\017\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034" +
    "\uff88\035\uff88\056\uff88\057\uff88\062\uff88\063\uff88\064\uff88" +
    "\066\uff88\067\uff88\070\uff88\001\002\000\070\010\uff8a\011" +
    "\uff8a\012\uff8a\013\uff8a\014\uff8a\016\uff8a\017\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\056\uff8a\057\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\066\uff8a\067\uff8a\070\uff8a\001" +
    "\002\000\032\011\042\013\064\016\034\034\056\035\062" +
    "\056\102\057\055\062\072\063\067\064\103\066\075\067" +
    "\123\001\002\000\004\012\177\001\002\000\004\020\200" +
    "\001\002\000\066\005\014\011\042\013\064\016\034\034" +
    "\056\035\062\037\043\040\021\041\013\042\037\043\010" +
    "\044\007\046\057\051\077\052\112\053\045\054\061\055" +
    "\066\056\102\057\055\060\006\062\072\063\067\064\103" +
    "\066\075\067\113\001\002\000\070\005\014\011\042\013" +
    "\064\016\034\021\202\034\056\035\062\037\043\040\021" +
    "\041\013\042\037\043\010\044\007\046\057\051\077\052" +
    "\112\053\045\054\061\055\066\056\102\057\055\060\006" +
    "\062\072\063\067\064\103\066\075\067\113\001\002\000" +
    "\070\005\uffc0\011\uffc0\013\uffc0\016\uffc0\021\uffc0\034\uffc0" +
    "\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\046\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0\064\uffc0\066" +
    "\uffc0\067\uffc0\001\002\000\010\011\024\015\205\016\117" +
    "\001\002\000\004\015\207\001\002\000\032\011\042\013" +
    "\064\016\034\034\056\035\062\056\102\057\055\062\072" +
    "\063\067\064\103\066\075\067\123\001\002\000\034\011" +
    "\uff8d\013\uff8d\016\uff8d\034\uff8d\035\uff8d\056\uff8d\057\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\066\uff8d\067\uff8d\070\uff8d\001" +
    "\002\000\032\011\042\013\064\016\034\034\056\035\062" +
    "\056\102\057\055\062\072\063\067\064\103\066\075\067" +
    "\123\001\002\000\034\011\uff8e\013\uff8e\016\uff8e\034\uff8e" +
    "\035\uff8e\056\uff8e\057\uff8e\062\uff8e\063\uff8e\064\uff8e\066" +
    "\uff8e\067\uff8e\070\uff8e\001\002\000\070\005\uffa4\011\uffa4" +
    "\013\uffa4\016\uffa4\021\uffa4\034\uffa4\035\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\046\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\066\uffa4\067\uffa4\001\002" +
    "\000\004\020\234\001\002\000\004\011\226\001\002\000" +
    "\070\005\uffba\011\uffba\013\uffba\016\uffba\021\uffba\034\uffba" +
    "\035\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\046\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\062\uffba\063\uffba\064\uffba\066" +
    "\uffba\067\uffba\001\002\000\074\005\uffbc\011\uffbc\013\uffbc" +
    "\016\uffbc\021\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\047\216\050\212" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc\067\uffbc" +
    "\001\002\000\004\011\220\001\002\000\070\005\uffbb\011" +
    "\uffbb\013\uffbb\016\uffbb\021\uffbb\034\uffbb\035\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb\067\uffbb\001" +
    "\002\000\032\011\042\013\064\016\034\034\056\035\062" +
    "\056\102\057\055\062\072\063\067\064\103\066\075\067" +
    "\123\001\002\000\004\012\222\001\002\000\004\020\223" +
    "\001\002\000\066\005\014\011\042\013\064\016\034\034" +
    "\056\035\062\037\043\040\021\041\013\042\037\043\010" +
    "\044\007\046\057\051\077\052\112\053\045\054\061\055" +
    "\066\056\102\057\055\060\006\062\072\063\067\064\103" +
    "\066\075\067\113\001\002\000\070\005\014\011\042\013" +
    "\064\016\034\021\225\034\056\035\062\037\043\040\021" +
    "\041\013\042\037\043\010\044\007\046\057\051\077\052" +
    "\112\053\045\054\061\055\066\056\102\057\055\060\006" +
    "\062\072\063\067\064\103\066\075\067\113\001\002\000" +
    "\074\005\uffc2\011\uffc2\013\uffc2\016\uffc2\021\uffc2\034\uffc2" +
    "\035\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\066\uffc2\067\uffc2\001\002\000\032\011\042" +
    "\013\064\016\034\034\056\035\062\056\102\057\055\062" +
    "\072\063\067\064\103\066\075\067\123\001\002\000\004" +
    "\012\230\001\002\000\004\020\231\001\002\000\066\005" +
    "\014\011\042\013\064\016\034\034\056\035\062\037\043" +
    "\040\021\041\013\042\037\043\010\044\007\046\057\051" +
    "\077\052\112\053\045\054\061\055\066\056\102\057\055" +
    "\060\006\062\072\063\067\064\103\066\075\067\113\001" +
    "\002\000\070\005\014\011\042\013\064\016\034\021\233" +
    "\034\056\035\062\037\043\040\021\041\013\042\037\043" +
    "\010\044\007\046\057\051\077\052\112\053\045\054\061" +
    "\055\066\056\102\057\055\060\006\062\072\063\067\064" +
    "\103\066\075\067\113\001\002\000\074\005\uffc3\011\uffc3" +
    "\013\uffc3\016\uffc3\021\uffc3\034\uffc3\035\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\062\uffc3\063\uffc3\064\uffc3\066\uffc3" +
    "\067\uffc3\001\002\000\066\005\014\011\042\013\064\016" +
    "\034\034\056\035\062\037\043\040\021\041\013\042\037" +
    "\043\010\044\007\046\057\051\077\052\112\053\045\054" +
    "\061\055\066\056\102\057\055\060\006\062\072\063\067" +
    "\064\103\066\075\067\113\001\002\000\070\005\014\011" +
    "\042\013\064\016\034\021\236\034\056\035\062\037\043" +
    "\040\021\041\013\042\037\043\010\044\007\046\057\051" +
    "\077\052\112\053\045\054\061\055\066\056\102\057\055" +
    "\060\006\062\072\063\067\064\103\066\075\067\113\001" +
    "\002\000\070\005\uffc1\011\uffc1\013\uffc1\016\uffc1\021\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\046\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\066\uffc1\067\uffc1\001\002\000\070\005\uffa6\011\uffa6" +
    "\013\uffa6\016\uffa6\021\uffa6\034\uffa6\035\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\046\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\066\uffa6\067\uffa6\001\002" +
    "\000\070\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016" +
    "\uffe5\017\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\056\uffe5\057\uffe5\062\uffe5\063\uffe5\064\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\001\002\000\006\011\uffe2\064\uffe2\001" +
    "\002\000\006\011\uffdf\064\uffdf\001\002\000\006\011\uffe0" +
    "\064\uffe0\001\002\000\006\011\246\064\103\001\002\000" +
    "\006\011\uffe1\064\uffe1\001\002\000\030\011\251\013\064" +
    "\016\034\034\056\035\062\056\102\057\055\062\072\063" +
    "\067\066\075\067\123\001\002\000\052\004\uffd8\006\uffd8" +
    "\007\uffd8\011\uffd8\012\uffd8\013\uffd8\016\uffd8\017\uffd8\022" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\056\uffd8\057\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\066\uffd8\067\uffd8\070\uffd8\001\002\000" +
    "\004\012\265\001\002\000\026\013\064\016\034\034\056" +
    "\035\062\056\102\057\055\062\072\063\067\066\075\067" +
    "\123\001\002\000\020\010\255\012\254\013\261\014\256" +
    "\025\262\032\257\033\260\001\002\000\020\010\uffde\012" +
    "\uffde\013\uffde\014\uffde\025\uffde\032\uffde\033\uffde\001\002" +
    "\000\056\011\uffcd\012\uffcd\013\uffcd\016\uffcd\017\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\034\uffcd\035\uffcd\056\uffcd\057\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\001\002\000\026\013\ufff3" +
    "\016\ufff3\034\ufff3\035\ufff3\056\ufff3\057\ufff3\062\ufff3\063" +
    "\ufff3\066\ufff3\067\ufff3\001\002\000\026\013\ufff5\016\ufff5" +
    "\034\ufff5\035\ufff5\056\ufff5\057\ufff5\062\ufff5\063\ufff5\066" +
    "\ufff5\067\ufff5\001\002\000\026\013\ufff2\016\ufff2\034\ufff2" +
    "\035\ufff2\056\ufff2\057\ufff2\062\ufff2\063\ufff2\066\ufff2\067" +
    "\ufff2\001\002\000\026\013\ufff0\016\ufff0\034\ufff0\035\ufff0" +
    "\056\ufff0\057\ufff0\062\ufff0\063\ufff0\066\ufff0\067\ufff0\001" +
    "\002\000\026\013\ufff4\016\ufff4\034\ufff4\035\ufff4\056\ufff4" +
    "\057\ufff4\062\ufff4\063\ufff4\066\ufff4\067\ufff4\001\002\000" +
    "\026\013\ufff1\016\ufff1\034\ufff1\035\ufff1\056\ufff1\057\ufff1" +
    "\062\ufff1\063\ufff1\066\ufff1\067\ufff1\001\002\000\026\013" +
    "\064\016\034\034\056\035\062\056\102\057\055\062\072" +
    "\063\067\066\075\067\123\001\002\000\054\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd\022\uffdd" +
    "\025\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\056\uffdd\057" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\066\uffdd\067\uffdd\070\uffdd" +
    "\001\002\000\052\004\uffd6\006\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\016\uffd6\017\uffd6\022\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\056\uffd6\057\uffd6\062\uffd6\063\uffd6\064\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\001\002\000\070\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\056\uffe3\057\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\066\uffe3\067\uffe3\070\uffe3\001\002" +
    "\000\004\070\uffb6\001\002\000\070\005\uffa2\011\uffa2\013" +
    "\uffa2\016\uffa2\021\uffa2\034\uffa2\035\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\046\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\066\uffa2\067\uffa2\001\002\000" +
    "\032\011\042\013\064\016\034\034\056\035\062\056\102" +
    "\057\055\062\072\063\067\064\103\066\075\067\123\001" +
    "\002\000\004\012\273\001\002\000\004\020\274\001\002" +
    "\000\066\005\014\011\042\013\064\016\034\034\056\035" +
    "\062\037\043\040\021\041\013\042\037\043\010\044\007" +
    "\046\057\051\077\052\112\053\045\054\061\055\066\056" +
    "\102\057\055\060\006\062\072\063\067\064\103\066\075" +
    "\067\113\001\002\000\070\005\014\011\042\013\064\016" +
    "\034\021\276\034\056\035\062\037\043\040\021\041\013" +
    "\042\037\043\010\044\007\046\057\051\077\052\112\053" +
    "\045\054\061\055\066\056\102\057\055\060\006\062\072" +
    "\063\067\064\103\066\075\067\113\001\002\000\074\005" +
    "\uffc4\011\uffc4\013\uffc4\016\uffc4\021\uffc4\034\uffc4\035\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\066\uffc4\067\uffc4\001\002\000\070\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\056\uffe4\057\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4\001\002" +
    "\000\032\011\042\013\064\016\034\034\056\035\062\056" +
    "\102\057\055\062\072\063\067\064\103\066\075\067\123" +
    "\001\002\000\004\012\302\001\002\000\070\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\016\uff87\017\uff87\022\uff87" +
    "\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\056\uff87\057\uff87" +
    "\062\uff87\063\uff87\064\uff87\066\uff87\067\uff87\070\uff87\001" +
    "\002\000\070\005\uffa5\011\uffa5\013\uffa5\016\uffa5\021\uffa5" +
    "\034\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\046\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\057\uffa5\060\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\066\uffa5\067\uffa5\001\002\000\070\005\uffa0\011\uffa0" +
    "\013\uffa0\016\uffa0\021\uffa0\034\uffa0\035\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\046\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\066\uffa0\067\uffa0\001\002" +
    "\000\030\011\uffee\013\uffee\016\uffee\034\uffee\035\uffee\056" +
    "\uffee\057\uffee\062\uffee\063\uffee\066\uffee\067\uffee\001\002" +
    "\000\032\011\uffe7\013\uffe7\016\uffe7\034\uffe7\035\uffe7\056" +
    "\uffe7\057\uffe7\062\uffe7\063\uffe7\064\320\066\uffe7\067\uffe7" +
    "\001\002\000\030\011\uffef\013\uffef\016\uffef\034\uffef\035" +
    "\uffef\056\uffef\057\uffef\062\uffef\063\uffef\066\uffef\067\uffef" +
    "\001\002\000\030\011\251\013\064\016\034\034\056\035" +
    "\062\056\102\057\055\062\072\063\067\066\075\067\123" +
    "\001\002\000\030\011\uffea\013\uffea\016\uffea\034\uffea\035" +
    "\uffea\056\uffea\057\uffea\062\uffea\063\uffea\066\uffea\067\uffea" +
    "\001\002\000\032\011\uffe9\013\uffe9\016\uffe9\034\uffe9\035" +
    "\uffe9\056\uffe9\057\uffe9\062\uffe9\063\uffe9\064\316\066\uffe9" +
    "\067\uffe9\001\002\000\030\011\uffec\013\uffec\016\uffec\034" +
    "\uffec\035\uffec\056\uffec\057\uffec\062\uffec\063\uffec\066\uffec" +
    "\067\uffec\001\002\000\030\011\uffed\013\uffed\016\uffed\034" +
    "\uffed\035\uffed\056\uffed\057\uffed\062\uffed\063\uffed\066\uffed" +
    "\067\uffed\001\002\000\030\011\uffeb\013\uffeb\016\uffeb\034" +
    "\uffeb\035\uffeb\056\uffeb\057\uffeb\062\uffeb\063\uffeb\066\uffeb" +
    "\067\uffeb\001\002\000\030\011\uffe8\013\uffe8\016\uffe8\034" +
    "\uffe8\035\uffe8\056\uffe8\057\uffe8\062\uffe8\063\uffe8\066\uffe8" +
    "\067\uffe8\001\002\000\042\011\uffda\012\uffda\013\uffda\016" +
    "\uffda\017\uffda\022\uffda\034\uffda\035\uffda\056\uffda\057\uffda" +
    "\062\uffda\063\uffda\064\uffda\066\uffda\067\uffda\070\uffda\001" +
    "\002\000\030\011\uffe6\013\uffe6\016\uffe6\034\uffe6\035\uffe6" +
    "\056\uffe6\057\uffe6\062\uffe6\063\uffe6\066\uffe6\067\uffe6\001" +
    "\002\000\020\002\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\001\002\000\016\037\326\040\021\041" +
    "\013\042\325\043\010\044\007\001\002\000\004\067\344" +
    "\001\002\000\032\011\042\013\064\016\034\034\056\035" +
    "\062\056\102\057\055\062\072\063\067\064\103\066\075" +
    "\067\123\001\002\000\004\067\332\001\002\000\004\067" +
    "\327\001\002\000\004\015\330\001\002\000\032\011\042" +
    "\013\064\016\034\034\056\035\062\056\102\057\055\062" +
    "\072\063\067\064\103\066\075\067\123\001\002\000\034" +
    "\011\uff90\013\uff90\016\uff90\034\uff90\035\uff90\056\uff90\057" +
    "\uff90\062\uff90\063\uff90\064\uff90\066\uff90\067\uff90\070\uff90" +
    "\001\002\000\004\015\333\001\002\000\032\011\042\013" +
    "\064\016\034\034\056\035\062\056\102\057\055\062\072" +
    "\063\067\064\103\066\075\067\123\001\002\000\034\011" +
    "\uff8f\013\uff8f\016\uff8f\034\uff8f\035\uff8f\056\uff8f\057\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\066\uff8f\067\uff8f\070\uff8f\001" +
    "\002\000\004\070\336\001\002\000\032\011\042\013\064" +
    "\016\034\034\056\035\062\056\102\057\055\062\072\063" +
    "\067\064\103\066\075\067\123\001\002\000\004\012\340" +
    "\001\002\000\004\020\341\001\002\000\066\005\014\011" +
    "\042\013\064\016\034\034\056\035\062\037\043\040\021" +
    "\041\013\042\037\043\010\044\007\046\057\051\077\052" +
    "\112\053\045\054\061\055\066\056\102\057\055\060\006" +
    "\062\072\063\067\064\103\066\075\067\113\001\002\000" +
    "\070\005\014\011\042\013\064\016\034\021\343\034\056" +
    "\035\062\037\043\040\021\041\013\042\037\043\010\044" +
    "\007\046\057\051\077\052\112\053\045\054\061\055\066" +
    "\056\102\057\055\060\006\062\072\063\067\064\103\066" +
    "\075\067\113\001\002\000\070\005\uffbe\011\uffbe\013\uffbe" +
    "\016\uffbe\021\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\062" +
    "\uffbe\063\uffbe\064\uffbe\066\uffbe\067\uffbe\001\002\000\006" +
    "\015\205\016\117\001\002\000\006\015\330\016\346\001" +
    "\002\000\004\062\347\001\002\000\004\017\350\001\002" +
    "\000\004\070\351\001\002\000\004\070\uff93\001\002\000" +
    "\006\015\333\016\353\001\002\000\004\062\354\001\002" +
    "\000\004\017\355\001\002\000\004\070\356\001\002\000" +
    "\004\070\uff92\001\002\000\006\017\360\022\141\001\002" +
    "\000\070\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016" +
    "\uffcf\017\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\056\uffcf\057\uffcf\062\uffcf\063\uffcf\064\uffcf\066\uffcf" +
    "\067\uffcf\070\uffcf\001\002\000\004\067\362\001\002\000" +
    "\006\012\uff9c\022\uff9c\001\002\000\006\012\uff9d\022\uff9d" +
    "\001\002\000\066\005\014\011\042\013\064\016\034\034" +
    "\056\035\062\037\043\040\021\041\013\042\037\043\010" +
    "\044\007\046\057\051\077\052\112\053\045\054\061\055" +
    "\066\056\102\057\055\060\006\062\072\063\067\064\103" +
    "\066\075\067\113\001\002\000\070\005\014\011\042\013" +
    "\064\016\034\021\366\034\056\035\062\037\043\040\021" +
    "\041\013\042\037\043\010\044\007\046\057\051\077\052" +
    "\112\053\045\054\061\055\066\056\102\057\055\060\006" +
    "\062\072\063\067\064\103\066\075\067\113\001\002\000" +
    "\020\002\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\001\002\000\024\002\ufffe\005\014\037\025\040" +
    "\021\041\013\042\022\043\010\044\007\060\006\001\002" +
    "\000\020\002\ufffc\037\025\040\021\041\013\042\022\043" +
    "\010\044\007\001\002\000\020\002\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\044\uff86\001\002\000\004\002" +
    "\001\001\002\000\020\002\ufffd\037\025\040\021\041\013" +
    "\042\022\043\010\044\007\001\002\000\004\061\375\001" +
    "\002\000\020\002\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\001\002\000\004\011\377\001\002\000" +
    "\004\012\u0100\001\002\000\004\020\u0101\001\002\000\066" +
    "\005\014\011\042\013\064\016\034\034\056\035\062\037" +
    "\043\040\021\041\013\042\037\043\010\044\007\046\057" +
    "\051\077\052\112\053\045\054\061\055\066\056\102\057" +
    "\055\060\006\062\072\063\067\064\103\066\075\067\113" +
    "\001\002\000\070\005\014\011\042\013\064\016\034\021" +
    "\u0103\034\056\035\062\037\043\040\021\041\013\042\037" +
    "\043\010\044\007\046\057\051\077\052\112\053\045\054" +
    "\061\055\066\056\102\057\055\060\006\062\072\063\067" +
    "\064\103\066\075\067\113\001\002\000\072\002\ufffb\005" +
    "\ufffb\011\ufffb\013\ufffb\016\ufffb\021\ufffb\034\ufffb\035\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\046" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\067" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\020\002\011\003\003\004\010\005\014\041" +
    "\017\042\016\053\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\372\041\017\042\016\053\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\366\041\166\042\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\027\042\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\360\001\001\000\002" +
    "\001\001\000\076\005\103\006\064\011\051\013\035\014" +
    "\106\015\062\016\100\017\045\020\052\021\047\023\070" +
    "\025\067\026\110\027\075\030\037\031\104\032\057\034" +
    "\034\035\107\036\077\037\046\041\017\042\073\043\053" +
    "\045\072\046\105\047\050\050\040\052\043\053\015\001" +
    "\001\000\034\006\136\011\051\013\035\014\106\015\062" +
    "\016\100\017\045\020\052\021\047\022\356\034\034\050" +
    "\040\052\043\001\001\000\002\001\001\000\004\010\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\051\013\251\014\247\020\052\021\047" +
    "\034\034\050\040\052\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\005\103\006\064\011\051\013\035\014\106\015\062\016" +
    "\100\017\045\020\052\021\047\023\070\025\067\026\110" +
    "\027\075\030\037\031\104\032\057\034\034\035\107\036" +
    "\151\041\017\042\073\043\053\045\072\046\105\047\050" +
    "\050\040\052\043\053\015\001\001\000\010\007\307\055" +
    "\314\056\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\266\011\051\013\035\014\106\015\062\016\100\017" +
    "\045\020\052\021\047\034\034\050\040\052\043\001\001" +
    "\000\002\001\001\000\004\012\243\001\001\000\004\051" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\214\064\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\165\041\166\042\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\113\001\001\000\002\001\001\000\010\033\131\061\134" +
    "\062\125\001\001\000\032\006\121\011\051\013\035\014" +
    "\106\015\062\016\100\017\045\020\052\021\047\034\034" +
    "\050\040\052\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\136\011\051\013\035\014\106\015\062" +
    "\016\100\017\045\020\052\021\047\022\137\034\034\050" +
    "\040\052\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\142\011\051\013\035\014\106\015\062\016" +
    "\100\017\045\020\052\021\047\034\034\050\040\052\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\145\011\051\013\035\014\106\015\062\016\100\017\045" +
    "\020\052\021\047\034\034\050\040\052\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\005\103\006\064" +
    "\011\051\013\035\014\106\015\062\016\100\017\045\020" +
    "\052\021\047\023\070\025\067\026\110\027\075\030\037" +
    "\031\104\032\057\034\034\035\107\036\077\037\147\041" +
    "\017\042\073\043\053\045\072\046\105\047\050\050\040" +
    "\052\043\053\015\001\001\000\074\005\103\006\064\011" +
    "\051\013\035\014\106\015\062\016\100\017\045\020\052" +
    "\021\047\023\070\025\067\026\110\027\075\030\037\031" +
    "\104\032\057\034\034\035\107\036\151\041\017\042\073" +
    "\043\053\045\072\046\105\047\050\050\040\052\043\053" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\051\014\106\015\062\016\154\017" +
    "\045\020\155\021\047\034\034\050\040\052\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\163\011\051\013\035\014\106\015\062\016\100\017" +
    "\045\020\052\021\047\034\034\050\040\052\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\051\014\106\015\062\016\175\017\045\020\155" +
    "\021\047\034\034\050\040\052\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\005\103\006\064\011\051" +
    "\013\035\014\106\015\062\016\100\017\045\020\052\021" +
    "\047\023\070\025\067\026\110\027\075\030\037\031\104" +
    "\032\057\034\034\035\107\036\077\037\200\041\017\042" +
    "\073\043\053\045\072\046\105\047\050\050\040\052\043" +
    "\053\015\001\001\000\074\005\103\006\064\011\051\013" +
    "\035\014\106\015\062\016\100\017\045\020\052\021\047" +
    "\023\070\025\067\026\110\027\075\030\037\031\104\032" +
    "\057\034\034\035\107\036\151\041\017\042\073\043\053" +
    "\045\072\046\105\047\050\050\040\052\043\053\015\001" +
    "\001\000\002\001\001\000\004\044\203\001\001\000\002" +
    "\001\001\000\032\006\205\011\051\013\035\014\106\015" +
    "\062\016\100\017\045\020\052\021\047\034\034\050\040" +
    "\052\043\001\001\000\002\001\001\000\032\006\207\011" +
    "\051\013\035\014\106\015\062\016\100\017\045\020\052" +
    "\021\047\034\034\050\040\052\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\051\014\106\015\062" +
    "\016\220\017\045\020\155\021\047\034\034\050\040\052" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\005\103\006\064\011\051\013\035\014\106\015\062\016" +
    "\100\017\045\020\052\021\047\023\070\025\067\026\110" +
    "\027\075\030\037\031\104\032\057\034\034\035\107\036" +
    "\077\037\223\041\017\042\073\043\053\045\072\046\105" +
    "\047\050\050\040\052\043\053\015\001\001\000\074\005" +
    "\103\006\064\011\051\013\035\014\106\015\062\016\100" +
    "\017\045\020\052\021\047\023\070\025\067\026\110\027" +
    "\075\030\037\031\104\032\057\034\034\035\107\036\151" +
    "\041\017\042\073\043\053\045\072\046\105\047\050\050" +
    "\040\052\043\053\015\001\001\000\002\001\001\000\026" +
    "\011\051\014\106\015\062\016\226\017\045\020\155\021" +
    "\047\034\034\050\040\052\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\005\103\006\064\011\051\013" +
    "\035\014\106\015\062\016\100\017\045\020\052\021\047" +
    "\023\070\025\067\026\110\027\075\030\037\031\104\032" +
    "\057\034\034\035\107\036\077\037\231\041\017\042\073" +
    "\043\053\045\072\046\105\047\050\050\040\052\043\053" +
    "\015\001\001\000\074\005\103\006\064\011\051\013\035" +
    "\014\106\015\062\016\100\017\045\020\052\021\047\023" +
    "\070\025\067\026\110\027\075\030\037\031\104\032\057" +
    "\034\034\035\107\036\151\041\017\042\073\043\053\045" +
    "\072\046\105\047\050\050\040\052\043\053\015\001\001" +
    "\000\002\001\001\000\076\005\103\006\064\011\051\013" +
    "\035\014\106\015\062\016\100\017\045\020\052\021\047" +
    "\023\070\025\067\026\110\027\075\030\037\031\104\032" +
    "\057\034\034\035\107\036\077\037\234\041\017\042\073" +
    "\043\053\045\072\046\105\047\050\050\040\052\043\053" +
    "\015\001\001\000\074\005\103\006\064\011\051\013\035" +
    "\014\106\015\062\016\100\017\045\020\052\021\047\023" +
    "\070\025\067\026\110\027\075\030\037\031\104\032\057" +
    "\034\034\035\107\036\151\041\017\042\073\043\053\045" +
    "\072\046\105\047\050\050\040\052\043\053\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\246\001\001\000\002\001\001\000\020\011\051\014" +
    "\247\020\155\021\047\034\034\050\040\052\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\051\013" +
    "\251\020\252\034\034\050\040\052\043\001\001\000\004" +
    "\010\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\051\020\263\034\034\050\040\052\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\051\014\106\015\062" +
    "\016\271\017\045\020\155\021\047\034\034\050\040\052" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\005\103\006\064\011\051\013\035\014\106\015\062\016" +
    "\100\017\045\020\052\021\047\023\070\025\067\026\110" +
    "\027\075\030\037\031\104\032\057\034\034\035\107\036" +
    "\077\037\274\041\017\042\073\043\053\045\072\046\105" +
    "\047\050\050\040\052\043\053\015\001\001\000\074\005" +
    "\103\006\064\011\051\013\035\014\106\015\062\016\100" +
    "\017\045\020\052\021\047\023\070\025\067\026\110\027" +
    "\075\030\037\031\104\032\057\034\034\035\107\036\151" +
    "\041\017\042\073\043\053\045\072\046\105\047\050\050" +
    "\040\052\043\053\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\300\011\051\013\035\014\106\015" +
    "\062\016\100\017\045\020\052\021\047\034\034\050\040" +
    "\052\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\051\020\155\021" +
    "\316\034\034\050\040\052\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\322\045\323\001" +
    "\001\000\002\001\001\000\026\011\051\014\106\015\062" +
    "\016\334\017\045\020\155\021\047\034\034\050\040\052" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\330\011\051\013\035\014\106\015" +
    "\062\016\100\017\045\020\052\021\047\034\034\050\040" +
    "\052\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\333\011\051\013\035\014\106\015\062\016\100" +
    "\017\045\020\052\021\047\034\034\050\040\052\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\336" +
    "\011\051\013\035\014\106\015\062\016\100\017\045\020" +
    "\052\021\047\034\034\050\040\052\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\005\103\006\064\011" +
    "\051\013\035\014\106\015\062\016\100\017\045\020\052" +
    "\021\047\023\070\025\067\026\110\027\075\030\037\031" +
    "\104\032\057\034\034\035\107\036\077\037\341\041\017" +
    "\042\073\043\053\045\072\046\105\047\050\050\040\052" +
    "\043\053\015\001\001\000\074\005\103\006\064\011\051" +
    "\013\035\014\106\015\062\016\100\017\045\020\052\021" +
    "\047\023\070\025\067\026\110\027\075\030\037\031\104" +
    "\032\057\034\034\035\107\036\151\041\017\042\073\043" +
    "\053\045\072\046\105\047\050\050\040\052\043\053\015" +
    "\001\001\000\002\001\001\000\004\044\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\005\103\006\064" +
    "\011\051\013\035\014\106\015\062\016\100\017\045\020" +
    "\052\021\047\023\070\025\067\026\110\027\075\030\037" +
    "\031\104\032\057\034\034\035\107\036\077\037\364\041" +
    "\017\042\073\043\053\045\072\046\105\047\050\050\040" +
    "\052\043\053\015\001\001\000\074\005\103\006\064\011" +
    "\051\013\035\014\106\015\062\016\100\017\045\020\052" +
    "\021\047\023\070\025\067\026\110\027\075\030\037\031" +
    "\104\032\057\034\034\035\107\036\151\041\017\042\073" +
    "\043\053\045\072\046\105\047\050\050\040\052\043\053" +
    "\015\001\001\000\002\001\001\000\012\005\367\041\017" +
    "\042\016\053\015\001\001\000\006\041\166\042\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\166" +
    "\042\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\005\103\006\064\011\051\013\035\014\106\015\062\016" +
    "\100\017\045\020\052\021\047\023\070\025\067\026\110" +
    "\027\075\030\037\031\104\032\057\034\034\035\107\036" +
    "\077\037\u0101\041\017\042\073\043\053\045\072\046\105" +
    "\047\050\050\040\052\043\053\015\001\001\000\074\005" +
    "\103\006\064\011\051\013\035\014\106\015\062\016\100" +
    "\017\045\020\052\021\047\023\070\025\067\026\110\027" +
    "\075\030\037\031\104\032\057\034\034\035\107\036\151" +
    "\041\017\042\073\043\053\045\072\046\105\047\050\050" +
    "\040\052\043\053\015\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    
    Analizador s;
    parser(Analizador s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= main 
            {
              Object RESULT =null;
		 System.out.println("encontro main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= funciones main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= main funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= funciones main funciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= INT MAIN LPAREN RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= funciones declaraFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= declaraFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= expresionRelLog 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionRellogica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= expresionAritmetica 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionAritmetica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operadorArit ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operadorArit ::= MENOS 
            {
              Object RESULT =null;
		 System.out.println("encontro MENOS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operadorArit ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operadorArit ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operadorArit ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operadorArit ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opRelacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opRelacional ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opRelacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opRelacional ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opRelacional ::= igual 
            {
              Object RESULT =null;
		 System.out.println("encontro igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opRelacional ::= noIgual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRelacional",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // igual ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("igual",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // igual ::= EQUAL LITERAL_BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("igual",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // noIgual ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("noIgual",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // noIgual ::= NOTEQUAL LITERAL_BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("noIgual",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadorUnario ::= MENOS numerico 
            {
              Object RESULT =null;
		System.out.println("encontro unario menos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadorUnario ::= INCREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro unario incremento "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadorUnario ::= DECREMENTO IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro unario decremento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorUnario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadorLogico ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operadorLogico ::= OR 
            {
              Object RESULT =null;
		 System.out.println("encontro logico or "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operadorLogico ::= REXC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operadorLogico ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresionAritmetica ::= operandoArit 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresionAritmetica ::= expresionAritmetica operadorArit operandoArit 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionAritmetica operadorArit operandoArit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresionRelLog ::= expresionRelacional 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionRelacional"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelLog",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresionRelLog ::= expresionLogica 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionLogica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelLog",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresionRelacional ::= operandoRel opRelacional operandoRel 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoRel opRelacional operandoRel"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresionLogica ::= terminoLogico 
            {
              Object RESULT =null;
		 System.out.println("encontro terminoLogico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresionLogica ::= expresionLogica operadorLogico terminoLogico 
            {
              Object RESULT =null;
		 System.out.println("encontro expresionLogica operadorLogico terminoLogico"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // terminoLogico ::= LITERAL_BOOL 
            {
              Object RESULT =null;
		 System.out.println("encontro LITERAL_BOOL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // terminoLogico ::= LPAREN expresionRelacional RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminoLogico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operandoArit ::= IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       identifier"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operandoArit ::= LITERAL_STRING 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       LITERAL_STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operandoArit ::= LITERAL_INT 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       LITERAL_INT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operandoArit ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit       LITERAL_FLOAT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operandoArit ::= llamaFuncion 
            {
              Object RESULT =null;
		 System.out.println("encontro llamafuncion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operandoArit ::= operadorUnario 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit  operadorUnarioxxx"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operandoArit ::= LBRACKET array RBRACKET 
            {
              Object RESULT =null;
		 System.out.println("encontro operandoArit array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoArit",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operandoRel ::= operandoArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operandoRel ::= LPAREN expresionAritmetica RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literales ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literales ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literales ::= LITERAL_BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literales ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literales ::= LITERAL_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literales ::= LBRACKET array RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // array ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // array ::= array COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if ::= IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // elif ::= ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;
		 System.out.println("encontro elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // elif ::= elif ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // else ::= ELSE LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // while ::= WHILE LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // doWhile ::= DO LBRACE bloque RBRACE WHILE LPAREN expresionRelLog RPAREN DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhile",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // for ::= FOR LPAREN declaraVar expresionRelLog DOLLAR expresion RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estructuraControl ::= if 
            {
              Object RESULT =null;
		 System.out.println("encontro if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructuraControl ::= if elif 
            {
              Object RESULT =null;
		 System.out.println("encontro if elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estructuraControl ::= if elif else 
            {
              Object RESULT =null;
		 System.out.println("encontro if elif else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estructuraControl ::= if else 
            {
              Object RESULT =null;
		 System.out.println("encontro if else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructuraControl ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // estructuraControl ::= doWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // estructuraControl ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // break ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // argumento ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // argumento ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // argumentos ::= argumento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // argumentos ::= argumentos COMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamaFuncion ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamaFuncion ::= IDENTIFIER LPAREN argumentos RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // llamaFuncion ::= lectura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // llamaFuncion ::= escritura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamaFuncion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // senFuncion ::= llamaFuncion DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("senFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // asignacion ::= IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= asignacion DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= funciones main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia ::= expresion DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia ::= declaraArray DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia ::= declaraVar DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro sentencia -> declaraVar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia ::= return DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro return dollar"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= break DOLLAR 
            {
              Object RESULT =null;
		 System.out.println("encontro break DOLLAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia ::= getValorArray DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia ::= setValorArray DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bloque ::= sentencia 
            {
              Object RESULT =null;
		 System.out.println("encontro sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;
		 System.out.println("encontro bloque sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros ::= tipo IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros ::= parametros COMA tipo IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaraFuncion ::= tipo IDENTIFIER LPAREN parametros RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaraFuncion ::= tipo IDENTIFIER LPAREN RPAREN LBRACE bloque RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraFuncion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipo ::= INT 
            {
              Object RESULT =null;
		 System.out.println("encontro int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 System.out.println("encontro char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaraArray ::= INT IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArray",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaraArray ::= CHAR IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArray",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaraArrayAux ::= LBRACKET LITERAL_INT RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArrayAux",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaraVar ::= INT IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;
		 System.out.println("encontro INT IDENTIFIER ASIG expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaraVar ::= CHAR IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaraVar ::= tipo IDENTIFIER declaraArrayAux ASIG expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaraVar ::= tipo IDENTIFIER ASIG expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // getValorArray ::= IDENTIFIER declaraArrayAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("getValorArray",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // setValorArray ::= getValorArray ASIG expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("setValorArray",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lectura ::= LEER LPAREN numerico RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // numerico ::= LITERAL_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // numerico ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numerico",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // escritura ::= ESCRIBIR LPAREN expresion RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // comentario ::= ARROBA LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // comentario ::= LCOMENTB LITERAL_STRING RCOMENTB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lookahead ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lookahead",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
