package src;
import java_cup.runtime.*;

parser code  {:


  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol)
      m.append( "("+info.toString()+")" );

    m.append(" : "+message);

    System.out.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};



/*---------------------------declaraciones------------------------*/

terminal REXC, ARROBA, OR, DOLLAR, AND, MULT, LPAREN, RPAREN, 
            MENOS, MAS, ASIG, LBRACKET, RBRACKET, LBRACE, RBRACE, 
             COMA, MENOR, MAYOR, 
            DIV, MENORIGUAL, MAYORIGUAL, EQUAL, NOTEQUAL, POTENCIA, 
            MODULO, INCREMENTO, DECREMENTO, NOT, INT, FLOAT, STRING, CHAR, ARRAY, BOOL, 
            MAIN, IF, ELIF, ELSE, WHILE, DO, FOR, RETURN, BREAK, LEER, ESCRIBIR, LCOMENTB, 
            RCOMENTB; 

//terminal String letra, simbolo;
terminal String LITERAL_INT, LITERAL_FLOAT, LITERAL_BOOL, LITERAL_CHAR, LITERAL_STRING;
terminal String IDENTIFIER;

non terminal  inicio, programa, main, funciones,
    expresion, /*expresionAux, termino, factor, valor, opMult, */
    opRelacional, operadorArit, operadorUnario, operadorLogico, expresionAritmetica, 
    expresionRelacional, expresionLogica, expresionRelLog, terminoLogico, 
    operandoArit, operandoRel, /*intLiteral, floatLiteral, stringLiteral, charLiteral, 
    boolLiteral,*/ array, if, elif, while, doWhile, for, estructuraControl, return, 
    break, argumentos, llamaFuncion, asignacion, sentencia, bloque, parametros, declaraFuncion,
    tipo, declaraArray, declaraArrayAux, declaraVar, getValorArray, setValorArray, lectura, numerico, escritura, comentario;





inicio ::= expr:e {: RESULT = e; :};

expr   ::= expr:e1 MAS  expr:e2   {: RESULT = (Integer)e1 + (Integer)e2; :}
        |   expr:e1 MENOS expr:e2   {: RESULT = (Integer)e1 - (Integer)e2; :}
        |   expr:e1 MULT expr:e2   {: RESULT = (Integer)e1 * (Integer)e2; :}
        |   expr:e1 DIV expr:e2  {: RESULT = (Integer)e1 / (Integer)e2; :}
        |   LPAREN expr:e RPAREN    {: RESULT = e; :}
        |   numero:n                {: RESULT = n; :}
        ;
