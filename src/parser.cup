package src;
import java_cup.runtime.*;


parser code {:
    
    Analizador s;
    parser(Analizador s){ this.s=s; }
:}

//init with {: s.init(); :};
scan with {: return s.next_token(); :};

/*---------------------------declaraciones------------------------*/

terminal REXC, ARROBA, OR, AND, MULT, LPAREN , RPAREN, 
            MENOS, MAS, ASIG, LBRACKET, RBRACKET, LBRACE, RBRACE, 
             COMA, MENOR, MAYOR, 
            DIV, MENORIGUAL, MAYORIGUAL, EQUAL, NOTEQUAL, POTENCIA, 
            MODULO, INCREMENTO, DECREMENTO, NOT, INT, FLOAT, STRING, CHAR, ARRAY, BOOL, 
            MAIN, IF, ELIF, ELSE, WHILE, DO, FOR, RETURN, BREAK, LEER, ESCRIBIR, LCOMENTB, 
            RCOMENTB; 

//terminal String letra, simbolo;
terminal String LITERAL_INT, LITERAL_FLOAT, LITERAL_BOOL, LITERAL_CHAR, LITERAL_STRING;
terminal String IDENTIFIER, DOLLAR;

non terminal  inicio, programa, main, funciones,
    expresion, /*expresionAux, termino, factor, valor, opMult, */
    opRelacional, operadorArit, operadorUnario, operadorLogico, expresionAritmetica, 
    expresionRelacional, expresionLogica, expresionRelLog, terminoLogico, 
    operandoArit, operandoRel, /*intLiteral, floatLiteral, stringLiteral, charLiteral, 
    boolLiteral,*/ array, if, elif, while, doWhile, for, estructuraControl, return, 
    break, argumentos, llamaFuncion, asignacion, sentencia, bloque, parametros, declaraFuncion,
    tipo, declaraArray, declaraArrayAux, declaraVar, getValorArray, setValorArray, lectura, numerico, escritura, comentario;

    
//non terminal identificador;
//non terminal operando;
non terminal senFuncion;
non terminal igual, noIgual;
non terminal intChar;
non terminal aritBool;
non terminal literales;
non terminal argumento;
non terminal lookahead;
non terminal else;
terminal uminus;
//non terminal simMenos;

//precedencia




precedence left MAS, MENOS;
precedence left MULT, DIV;
precedence right uminus;
precedence left  POTENCIA, MODULO;
precedence left AND, OR;
precedence nonassoc NOT, REXC;
//precedence left RPAREN;
//precedence left LPAREN;
//recedence right DOLLAR;

precedence left CHAR, INT;
precedence left IDENTIFIER;
precedence left LPAREN,LBRACKET;

start with inicio;



inicio ::= programa:e {: RESULT = e; :};
//inicio ::= programa;


programa ::= main {: System.out.println("encontro main"); :}
    | funciones main
    | main funciones
    | funciones main funciones
    ;

main ::= INT MAIN LPAREN RPAREN LBRACE bloque RBRACE ;


funciones ::= funciones declaraFuncion
    | declaraFuncion
    | comentario
    ;




//identificador ::= IDENTIFIER;

expresion ::= expresionRelLog{: System.out.println("encontro expresionRellogica"); :}
    |expresionAritmetica {: System.out.println("encontro expresionAritmetica"); :}
    ;


operadorArit::= MAS
    | MENOS {: System.out.println("encontro MENOS"); :}
    | MULT 
    | POTENCIA 
    | DIV 
    | MODULO
    ;

opRelacional ::= MENOR
    | MENORIGUAL
    | MAYOR
    | MAYORIGUAL
    | igual {: System.out.println("encontro igual"); :}
    | noIgual
    ;
igual ::= EQUAL
    | EQUAL LITERAL_BOOL
    ;
noIgual ::=NOTEQUAL
    | NOTEQUAL LITERAL_BOOL
    ;
//operadorArit ::= opSuma | opMult;

operadorUnario ::= MENOS numerico  {:System.out.println("encontro unario menos"); :} %prec uminus
    | INCREMENTO IDENTIFIER {: System.out.println("encontro unario incremento "); :}
    | DECREMENTO IDENTIFIER {: System.out.println("encontro unario decremento"); :}
    ;



operadorLogico ::= AND
    |OR {: System.out.println("encontro logico or "); :}
    |REXC
    |NOT
    ;

expresionAritmetica ::= operandoArit {: System.out.println("encontro operandoArit"); :}
    | expresionAritmetica operadorArit operandoArit {: System.out.println("encontro expresionAritmetica operadorArit operandoArit"); :}
    ;

expresionRelLog ::= expresionRelacional {: System.out.println("encontro expresionRelacional"); :}
    | expresionLogica {: System.out.println("encontro expresionLogica"); :}
    ;

expresionRelacional ::= operandoRel opRelacional operandoRel {: System.out.println("encontro operandoRel opRelacional operandoRel"); :} ;

expresionLogica ::= terminoLogico {: System.out.println("encontro terminoLogico"); :}
    | expresionLogica operadorLogico terminoLogico {: System.out.println("encontro expresionLogica operadorLogico terminoLogico"); :}
    ;



terminoLogico ::= LITERAL_BOOL {: System.out.println("encontro LITERAL_BOOL"); :}
   // | expresionRelacional
   //|expresionAritmetica {: System.out.println("encontro expresionAritmetica"); :}
    | LPAREN expresionRelacional RPAREN
    ;

//aritBool ::= operandoArit 
//    | LITERAL_BOOL {: System.out.println("encontro aritBool LITERAL_BOOL"); :} 
  //  ;

operandoArit ::= IDENTIFIER {: System.out.println("encontro operandoArit       identifier"); :}
    | LITERAL_STRING {: System.out.println("encontro operandoArit       LITERAL_STRING"); :}
    | LITERAL_INT       {: System.out.println("encontro operandoArit       LITERAL_INT"); :}
    | LITERAL_FLOAT     {: System.out.println("encontro operandoArit       LITERAL_FLOAT"); :}
    | llamaFuncion      {: System.out.println("encontro llamafuncion"); :}
    | operadorUnario    {: System.out.println("encontro operandoArit  operadorUnarioxxx"); :}
    | LBRACKET array RBRACKET {: System.out.println("encontro operandoArit array"); :}
    ;

operandoRel ::= operandoArit 
    | LPAREN expresionAritmetica RPAREN
    ;


literales ::= LITERAL_INT
    |LITERAL_FLOAT
    |LITERAL_BOOL
    |LITERAL_STRING
    |LITERAL_CHAR
    |LBRACKET array RBRACKET
    ;

array ::= expresion  
    | array COMA expresion
    ;

//estructuras de control



if ::= IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
    //| IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE elif {: System.out.println("encontro if elif"); :}
    //| IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE elif ELSE LBRACE bloque RBRACE {: System.out.println("encontro if elif else"); :}
    //| IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE ELSE LBRACE bloque RBRACE {: System.out.println("encontro if else"); :}
    ;

elif ::= ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE {: System.out.println("encontro elif"); :}
    | elif ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE
    ;

else ::= ELSE LBRACE bloque RBRACE;

while ::= WHILE LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE ;

doWhile ::= DO LBRACE bloque RBRACE WHILE LPAREN expresionRelLog RPAREN DOLLAR ;

for ::= FOR LPAREN declaraVar expresionRelLog DOLLAR expresion RPAREN LBRACE bloque RBRACE ;

estructuraControl ::=  if {: System.out.println("encontro if"); :}
    |if elif {: System.out.println("encontro if elif"); :}
    |if elif else {: System.out.println("encontro if elif else"); :}
    |if  else {: System.out.println("encontro if else"); :}
    | while 
    | doWhile 
    | for
    ;

return ::= RETURN expresion
    |RETURN
    ;

break ::= BREAK ;

argumento ::= IDENTIFIER
    | literales
    ;

argumentos ::= argumento
    | argumentos COMA expresion
    ;

llamaFuncion ::= IDENTIFIER  LPAREN RPAREN
    | IDENTIFIER LPAREN argumentos RPAREN
    | lectura
    | escritura
    ;

senFuncion ::= llamaFuncion DOLLAR ;

asignacion ::= IDENTIFIER ASIG expresion;

sentencia ::= asignacion DOLLAR  {: System.out.println("encontro asignacion"); :}
    | funciones main
    //| senFuncion
    | estructuraControl 
    | expresion DOLLAR
    | declaraArray DOLLAR
    | declaraVar DOLLAR {: System.out.println("encontro sentencia -> declaraVar"); :}
    | return DOLLAR {: System.out.println("encontro return dollar"); :}
    | break DOLLAR {: System.out.println("encontro break DOLLAR"); :}
    | getValorArray DOLLAR
    | setValorArray DOLLAR
    ;

bloque ::= sentencia {: System.out.println("encontro sentencia"); :}
    | bloque sentencia {: System.out.println("encontro bloque sentencia"); :}
    //| sentencia bloque {: System.out.println("encontro sentencia bloque"); :}
    ;

parametros ::= tipo IDENTIFIER
    | parametros COMA tipo IDENTIFIER
    ;

declaraFuncion ::= tipo IDENTIFIER LPAREN parametros RPAREN LBRACE bloque RBRACE
    | tipo IDENTIFIER LPAREN RPAREN LBRACE bloque RBRACE
    ;

tipo ::= INT {: System.out.println("encontro int"); :}
    | CHAR {: System.out.println("encontro char"); :}
    |FLOAT
    |STRING
    |ARRAY
    |BOOL
    ;

//intChar ::= INT {: System.out.println("encontro int"); :}
//    | CHAR {: System.out.println("encontro char"); :};
declaraArray ::=  INT IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR
    |   CHAR IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR;

declaraArrayAux ::= LBRACKET LITERAL_INT RBRACKET
    //| declaraArrayAux LBRACKET LITERAL_INT RBRACKET 
    ;

declaraVar ::= INT IDENTIFIER ASIG expresion {: System.out.println("encontro INT IDENTIFIER ASIG expresion"); :}
    | CHAR IDENTIFIER  ASIG expresion
    | tipo IDENTIFIER declaraArrayAux ASIG expresion 
    | tipo IDENTIFIER ASIG expresion 
    ;

getValorArray ::= IDENTIFIER declaraArrayAux
    ;

setValorArray ::= getValorArray ASIG expresion ;

lectura ::= LEER LPAREN numerico RPAREN ;

numerico ::= LITERAL_INT | LITERAL_FLOAT ; 

escritura ::= ESCRIBIR LPAREN expresion RPAREN ;

comentario ::= ARROBA LITERAL_STRING
    | LCOMENTB LITERAL_STRING RCOMENTB
    ;


lookahead::= ;